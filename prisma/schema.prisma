generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  cats      Cat[]
}

enum Activity {
  LOW
  NORMAL
  HIGH
}

model Cat {
  id         String   @id @default(uuid())
  userId     String
  name       String
  weightKg   Float
  ageYears   Int
  activity   Activity @default(NORMAL)
  sex        String   @default("不明")
  hairAmount String   @default("普通")
  size       String   @default("中型")
  neutered   Boolean  @default(false)
  allergies  String?
  createdAt  DateTime @default(now())

  // ★ 追加：画像URL（/public 配下の相対URLを入れる想定）
  imageUrl   String?  // <= これを追加

  user        User                   @relation(fields: [userId], references: [id])
  preferences IngredientPreference[]
  meals       Meal[]
  stoolLogs   StoolLog[]

  @@index([userId])
}

model Product {
  id               Int      @id @default(autoincrement())
  barcode          String   @unique
  name             String
  brand            String   @default("")
  ingredients_text String   @default("")
  image            String   @default("")
  source           String   @default("local")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  variants  ProductVariant[]
  mealItems MealItem[]
}

enum IngredientLevel {
  OK
  CAUTION
  NG
}

model IngredientPreference {
  id        String          @id @default(uuid())
  catId     String
  keyword   String
  level     IngredientLevel
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  cat Cat @relation(fields: [catId], references: [id])

  @@unique([catId, keyword])
}

model ProductVariant {
  id        Int     @id @default(autoincrement())
  productId Int
  form      String
  label     String
  lifeStage String?
  flavor    String  @default("")
  features  String?

  ingredients_text String @default("")

  proteinMin  Float?
  fatMin      Float?
  fiberMax    Float?
  ashMax      Float?
  moistureMax Float?

  kcalPer100g Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product  Product   @relation(fields: [productId], references: [id])
  mealItems MealItem[]

  @@unique([productId, form, label, flavor])
  @@index([productId])
  @@index([label])
  @@index([flavor])
  @@index([features])
  @@index([ingredients_text])
}

enum MealSlot {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

model Meal {
  id        Int        @id @default(autoincrement())
  catId     String
  cat       Cat        @relation(fields: [catId], references: [id])
  date      DateTime
  slot      MealSlot
  notes     String?
  items     MealItem[]
  createdAt DateTime   @default(now())

  @@unique([catId, date, slot])

  @@index([catId, date, slot])
  @@index([date])
}

model MealItem {
  id               Int             @id @default(autoincrement())
  mealId           Int
  meal             Meal            @relation(fields: [mealId], references: [id])

  productVariantId Int?
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])

  productId        Int?
  product          Product?        @relation(fields: [productId], references: [id])

  name             String?
  kcal             Float?
  ingredientsText  String?
  source           String?

  grams            Int

  @@index([productId])
  @@index([productVariantId])
}

enum StoolStatus {
  NONE
  NORMAL
  SOFT
  DIARRHEA
  HARD
}

model StoolLog {
  id        Int         @id @default(autoincrement())
  catId     String
  cat       Cat         @relation(fields: [catId], references: [id])
  date      DateTime
  status    StoolStatus
  color     String?
  amount    String?
  mucus     Boolean?
  blood     Boolean?
  note      String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([catId, date])

  @@index([catId, date])
}
